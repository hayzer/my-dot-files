# Environment functions 
#

# Load the local environment
if [ -e ~/.local_functions ]; then
  source ~/.local_functions
fi

function _searcher() {
    if which ag;then
        true
    elif which ack;then
        true
    else
        which grep
    fi
}

# Search the pstree
function pt () {
	declare search="${*}"
	declare s=$(_searcher)
	echo "[$s]"
	pstree -paGh | ${s} ${search}
}

# Search the history
function ghistory () {
    declare s=$(_searcher)
    var=$(history | ${s} $1 | wc -l)
	if (( $var > 22 )); then
		history | ${s} $1 | less
	else
		history | ${s} $1
	fi
}

# Save file deletion. 
function del () {
	declare target="${1}"
	
	/bin/cp -R ${target} ~/.Trash/ && /bin/rm -f ${target} 
}

# Improved grep. Short version.
function lookfor () {
	declare regexp="${1}"
	declare   path="${2}"

	/bin/grep --recursive                  \
              --line-number                \
		      --color=always               \
              --binary-files=without-match \
              --perl-regexp "${regexp}"    \
              ${path:=.} | grep -v '.svn'
}	

# Convert ascii string to SNMP OID address
function ascii2oid () {
	declare string=${1}
	declare length=${#string}
	declare newstring

	declare -a ascii2dec=( $(echo ${string}|sed -n 's/\(.\)/ \1/gp') )

	for elem in ${ascii2dec[@]}; do
		newstring="${newstring}$(printf ".%d" \"${elem}\")"
	done
	echo "${length}${newstring}"
}

function oid2ascii () {
	declare oid=${1}
	declare -a string=( $(echo ${oid//./ }) )
	declare ascii

	for i in ${string[@]}; do
		declare temp=$( perl -e 'print pack("C*",'${i}')' )
		ascii="${ascii}${temp}"
	done

	echo ${ascii}
}

# Locate dependency of Perl modules
function find-perl-module-use () {
	declare dir=${1:-lib}
	declare s=$(_searcher)

	${s} '^\s*use\s+.*;\s*$' ${dir} | \
	awk '{ print $2 }'             | \
	sed 's/();\?$\|;$//'           | \
	sort                           | \
	uniq

	${s} '^\s*use\s+base\s+.*;\s*$' ${dir} | \
	awk '{ print $3 }'                    | \
	sed 's/();\?$\|;$//'                  | \
	sort                                  | \
	uniq
}


function google () {
	u=`perl -MURI::Escape -wle 'print "http://google.com/search?q=".
	uri_escape(join " ", @ARGV)' $@`
	w3m -no-mouse -F $u
}

function gilo () {
	git log -n30 --pretty=tformat:"^%h^%aN^%ai^|^%d^%s" $@ |
		TERM_COLUMNS=$COLUMNS perl -F'\^' -lane '
			my $WIDTH = $ENV{TERM_COLUMNS} - 49 - length($F[0]) - length($F[5]);
			if (scalar @F == 1)
			{
				printf("                                               %.${WIDTH}s\n", $F[0])
			}
			else
			{
				printf("\033[32m$F[1] \033[33m%-19s \033[0m%.16s \033[31m%s\033[0m%s\033[0;31m%s\033[0m%-.${WIDTH}s\n",
					$F[2], $F[3], $F[4], length($F[0]) ? " $F[0]" : " ", length($F[5]) ? "$F[5] " : "", @F[6..10]);
			}
		'
}

# Open any archive
function ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjvf $1;;
      *.tar.gz)    tar xzvf $1;;
      *.bz2)       bunzip2 $1;;
      *.rar)       rar x $1;;
      *.gz)        gunzip $1;;
      *.tar)       tar xf $1;;
      *.tbz2)      tar xjf $1;;
      *.tgz)       tar xzf $1;;
      *.zip)       unzip $1;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1;;
      *.xz)        
            xz -d $1
            tar -xf ${1##.xz}
            ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function update-kubernetes() {
    URL="https://storage.googleapis.com/kubernetes-release/release"
    VERSION=$(curl -s ${URL}/stable.txt)

    curl -LO ${URL}/${VERSION}/bin/linux/amd64/kubectl

    chmod +x ./kubectl
    sudo mv ./kubectl /usr/local/bin/kubectl
}

function update-minikube() {
    curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    chmod +x minikube
    sudo mv minikube /usr/local/bin/
}

# vim ts=4 sw=4 syn=sh :
